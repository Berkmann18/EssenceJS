//noinspection JSValidateJSDoc
function EvtShow(t){alert("\tName: "+t.name+"\nsource: "+t.source+"\ndata: "+t.data+"\ntarget: "+t.target+"\ntime stamp: "+t.timeStamp)}function evtLog(t){for(var o in t)t.hasOwnProperty(o)&&Essence.say(o+": "+t[o])}function InvalidParamError(t,o,e){var r=TypeError.call(this,t||"The parameter is invalid !")
this.name="InvalidParamError",this.message=r.message,this.stack=r.stack,this.fileName=o||location.href,this.lineNumber=e||getLineNum()}function InvalidExpressionError(t,o,e){var r=Error.call(this,t||"The expression is invalid !")
this.name="InvalidExpressionError",this.message=r.message,this.stack=r.stack,this.fileName=o||location.href,this.lineNumber=e||getLineNum()}function getTrace(){var t=function(){try{throw Error("")}catch(t){return t}},o=stripPath(t().stack.split("\n").last())
return o.split(" ").last()}function getLineNum(t){return t?getTrace().split(":")[1]:getTrace().get(getTrace().indexOf(":")+1).remove()}function testErr(t){try{throw t}catch(t){Essence.say("%cTested error%c:\n"+t.stack,"erro","text-decoration: underline; color: #000;","text-decoration: none; color: #000;")}}function noobTest(t,o){try{t(o)}catch(t){location.href="http://Stackoverflow.com/search?q=[js]+"+t.message}}function test(fx){try{isType(fx,"String")?eval(fx):fx(arguments.toArray().get(1))}catch(t){Essence.handleError(t+"\n",getFilename(!0),getLineNum(!0))}}var QTest=new Module("QTest","QA and tests",["Maths","DOM"])
InvalidParamError.inherits(TypeError),InvalidExpressionError.inherits(Error)
var UnitTest={total:0,fail:0,failRate:0,coverage:0,test:function(t,o,e,r){this.total++
var s,i,c=Copy(t)
s=time(function(){i=c.equals(o)}),i?r&&i&&console.log("%c[Unit]%c The expectation on "+o+" was satisfied !\t("+s+"ms)","color: #c0c","color: #000"):(this.fail++,console.log("%c[Unit]%c "+(e||"Test #f"+this.fail)+': Expected "%c'+o+'%c" but was "%c'+c+'%c"\t('+s+"ms)","color: #c0c","color: #000","color: #0f0","color: #000","color: #f00","color: #000"))},testFalse:function(t,o,e,r){this.total++
var s,i,c=Copy(t)
s=time(function(){i=c.equals(o)}),i?(this.fail++,console.log("%c[Unit]%c "+(e||"Test #f"+this.fail)+": Didn't expected \"%c"+o+'%c" to be "%c'+c+'%c"\t('+s+"ms)","color: #c0c","color: #000","color: #0f0","color: #000","color: #f00","color: #000")):r&&!i&&console.log("%c[Unit]%c The anti-expectation on "+o+" was satisfied !\t("+s+"ms)","color: #c0c","color: #000")},reset:function(){this.total=0,this.fail=0,this.failRate=0,this.coverage=0},multiTest:function(t,o){this.reset(),console.group("%c[Unit]%c Multi test","color: #c0c","color: #000"),console.time("Unit test")
for(var e=0;e<t.length-1;e++)this.test(t[e][0],t[e][1],3===t[e].length?t[e][2]:"",o)
console.timeEnd("Unit test"),this.report(),console.groupEnd()},report:function(){this.failRate=markConv(this.fail,this.total),console.info("%c[Unit]%c Pass/Fail: %c"+(this.total-this.fail)+"%c/%c"+this.fail+"%c ("+this.failRate+"% fail); on "+BrowserDetect.info()+" at "+getLineNum(),"color: #c0c","color: #000","color: #0f0","color: #000","color: #f00","color: #000")},basicTests:function(){this.reset(),console.log("%c[Unit]%c Basic tests","color: #c0c","color: #000"),this.multiTest([[eval(3),3],["Hello World".split(" "),[["H","end","l","l","o"].join(""),["W","o","rad","l","d"].join("")]],[nthroot(5,2,4),Math.pow(5,.5).toNDec(4)]])},libTests:[],assert:function(t,o){console.assert(t,o)}}
